import { Color, Matrix4, MeshDepthMaterial, Object3D, Scene, ShaderMaterial, Vector2, WebGLRenderTarget, PerspectiveCamera, WebGLRenderer, OrthographicCamera } from 'three';
import { FullScreenQuad } from 'three/examples/jsm/postprocessing/Pass.js';
declare const OutlinePass_base: any;
declare class OutlinePass extends OutlinePass_base {
    renderScene: Scene;
    renderCamera: PerspectiveCamera | OrthographicCamera;
    selectedObjects: Object3D[];
    visibleEdgeColor: Color;
    hiddenEdgeColor: Color;
    edgeThickness: number;
    edgeStrength: number;
    downSampleRatio: number;
    resolution: Vector2;
    BlurDirectionX: Vector2;
    BlurDirectionY: Vector2;
    renderTargetMaskBuffer: WebGLRenderTarget;
    renderTargetDepthBuffer: WebGLRenderTarget;
    renderTargetMaskDownSampleBuffer: WebGLRenderTarget;
    renderTargetBlurBuffer1: WebGLRenderTarget;
    renderTargetBlurBuffer2: WebGLRenderTarget;
    renderTargetEdgeBuffer1: WebGLRenderTarget;
    renderTargetEdgeBuffer2: WebGLRenderTarget;
    depthMaterial: MeshDepthMaterial;
    edgeDetectionMaterial: ShaderMaterial;
    separableBlurMaterial1: ShaderMaterial;
    separableBlurMaterial2: ShaderMaterial;
    overlayMaterial: ShaderMaterial;
    materialCopy: ShaderMaterial;
    _visibilityCache: Map<any, any>;
    _oldClearColor: Color;
    oldClearAlpha: number;
    fsQuad: FullScreenQuad;
    textureMatrix: Matrix4;
    copyUniforms: any;
    constructor(resolution: Vector2, scene: Scene, camera: PerspectiveCamera | OrthographicCamera, selectedObjects: Object3D[]);
    replaceDepthToViewZ(string: string, camera: PerspectiveCamera | OrthographicCamera): string;
    dispose(): void;
    setSize(width: number, height: number): void;
    changeVisibilityOfSelectedObjects(bVisible: boolean): void;
    changeVisibilityOfNonSelectedObjects(bVisible: boolean): void;
    updateTextureMatrix(): void;
    render(renderer: WebGLRenderer, writeBuffer: WebGLRenderTarget, readBuffer: WebGLRenderTarget, deltaTime: number, maskActive: boolean): void;
    getPrepareMaskMaterial(): ShaderMaterial;
    getEdgeDetectionMaterial(): ShaderMaterial;
    getSeperableBlurMaterial(maxRadius: number): ShaderMaterial;
    getOverlayMaterial(): ShaderMaterial;
}
export { OutlinePass };
//# sourceMappingURL=OutlinePass.d.ts.map